#!/bin/bash
#
# A simple script to download the current month's Crypto-Gram issue and import
# it in my Calibre library.
# 
# Requirements: cURL, ImageMagik, Calibre (duh!), Zenity, ncftp, GNU sed
#

export LANG=en_US.utf8
export LC_ALL=en_US.utf8

#
# Removes the menus and other accessory content from the Crypto-Gram
# web page. All the main content is kept inside a
# <td class="contentcell">...</td>
#
# Usage: declutterize input.html outpout.html
#
function declutterize
{
    INFILE="$1"
    OUTFILE="$2"

    OLD_IFS="$IFS"
    IFS=$'\n'
    BEGIN_WRITE=''
    END_WRITE=''
    cat > "$OUTFILE" << EOF
<html>
<head>
<title>Crypto-Gram - $(date +'%B %Y') issue</title>
</head>
<body>
EOF
    for LINE in $(cat "$INFILE")
    do
        if [ -z "$BEGIN_WRITE" ]
        then
            BEGIN_WRITE=$(echo "$LINE" | grep '<div id="content">')
        else
            if [ -z "$END_WRITE" ]
            then
                echo "$LINE" >> "$OUTFILE"
                END_WRITE=$(echo "$LINE" | grep '</div><!--#content-->')
            fi
        fi
    done

    cat >> "$OUTFILE" << EOF
</body></html>
EOF
}

#
# Uploads a file to my blog's cryptogram directory.
#
# Usage: ftp_upload cryptogram_last.epub
#
function ftp_upload {
    FILE_TO_UPLOAD="$1"
    if [ -d "$HOME/bernardi.cloud" ]
    then
        cp "$FILE_TO_UPLOAD" "$HOME/bernardi.cloud/static/cryptogram"
    else
        ncftpput \
            -f "$NCFTPCFG" \
            www.bernardi.cloud/cryptogram \
            "$FILE_TO_UPLOAD"
    fi
}

################################################################################
##### Checks if the user has requested command line help
################################################################################

if [ "$1" == '-h' -o "$1" == '--help' ]
then
    echo
    echo "Usage: $0"
    echo
    echo 'Puts the latest issue of Crypto-Gram into your Calibre database'
    exit
fi

################################################################################
##### Checks for software needed to run the script
################################################################################

( which zenity > /dev/null ) || ZENITY=no
if [ "$ZENITY" == 'no' ]
then
    echo 'ERROR: you need to install Zenity to run Webpage to Calibre'
    exit
fi

(( which montage && which mogrify ) > /dev/null ) || IMAGEMAGICK=no
if [ "$IMAGEMAGICK" == 'no' ]
then
    zenity --error \
            --title='Crypto-Gram to Calibre' \
            --text='You need to install ImageMagick to run Crypto-Gram to Calibre'
    exit
fi

(( which web2disk && \
    which ebook-convert && \
    which ebook-meta && \
    which calibredb ) > /dev/null ) || CALIBRE=no
if [ "$CALIBRE" == 'no' ]
then
    zenity --error \
            --title='Crypto-Gram to Calibre' \
            --text='You need to install Calibre to run Crypto-Gram to Calibre (duh!)'
    exit
fi

# This script relies on GNU sed. On Mac OS X it must be installed
# with brew install gnu-sed
if [[ "$OSTYPE" == 'darwin'* ]]
then
    SED=/usr/local/opt/gnu-sed/libexec/gnubin/sed
    if [ ! -e "$SED" ]
    then
        zenity --error \
                --title='Crypto-Gram to Calibre' \
                --text='You need to install gnu-sed (brew install gnu-sed)'
        exit
    fi
else
    SED=sed
fi

if [ -d "$HOME/bernardi.cloud" ]
then
    zenity --info \
            --title="Crypto-Gram to Calibre" \
            --text="The files will be copied to $HOME/bernardi.cloud/static/cryptogram"
else
    (( which ncftpput ) > /dev/null ) || NCFTP=no
    if [ "$NCFTP" == 'no' ]
    then
        zenity --error \
                --title='Crypto-Gram to Calibre' \
                --text='You need to install ncftp to run Crypto-Gram to Calibre'
        exit
    fi
fi

# I'm not putting my FTP credentials in a public repository.
# If needed, at most, I'll make this a parameter.
NCFTPCFG="$HOME/bc/dotfiles/bernardi.cloud/ncftp-cryptogram.cfg"
if [ ! -e "$NCFTPCFG" ]
then
    zenity --error \
            --title='Crypto-Gram to Calibre' \
            --text="ncftp credentials are missing: $NCFTPCFG"
    exit
fi

################################################################################
##### Prepares the paths variables and the temporary directories
################################################################################

TITLE="Crypto-Gram - $(date +'%B %Y') issue"
OLD_PWD="$(pwd)"
TMP_DIR="$HOME/.cryptogram2calibre"
HTML_DIR="$TMP_DIR/html"
SCRIPT_PATH=$(cd ${0%/*} && echo $PWD/${0##*/})
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
rm -fr "$TMP_DIR"
mkdir -p "$HTML_DIR"
cd "$TMP_DIR"

( # Here starts the code tracked by zenity's progress bar

################################################################################
##### Determines the URL to retrieve and the title of the webpage
################################################################################

URL=$(curl 'https://www.schneier.com/crypto-gram/' \
    | grep -o '<a .*href="https://www.schneier.com/crypto-gram/archives/.*>' \
    | "$SED" -e 's/<a /\n<a /g' \
    | "$SED" -e 's/<a .*href=['"'"'"]//' -e 's/["'"'"'].*$//' -e '/^$/ d' \
    | head -n1)
echo 20

################################################################################
##### Prepares the cover image
################################################################################

montage \
    -label "${TITLE}" \
    "$SCRIPT_DIR/cryptogram-cover-template.jpg" \
    -geometry +0+0 -pointsize 21 -frame 3 \
    cover.jpg > /dev/null
mogrify -resize 590x754! cover.jpg > /dev/null
echo 30

################################################################################
##### Creates the ZIP bundle containing the HTML page
################################################################################

web2disk -d "$HTML_DIR" -r 0 --verbose "$URL" > /dev/null
HTML_FILE=$(echo "$HTML_DIR/"*.xhtml | head -n1)
declutterize "$HTML_FILE" "$HTML_DIR/index.html"
zip -r pippo.zip html   # I don't use HTML_DIR to not clutter the .ZIP internal paths
echo 50

################################################################################
##### Creates the alternative formats
################################################################################

# Direct conversion from HTML to EPUB or PDF gives the following error:
# ValueError: All strings must be XML compatible: Unicode or ASCII, no NULL bytes
ebook-convert pippo.zip pippo.mobi \
  --no-inline-toc \
  --cover=cover.jpg \
  > /dev/null
ebook-convert pippo.mobi pippo.epub \
  --preserve-cover-aspect-ratio \
  --dont-split-on-page-breaks \
  --cover=cover.jpg \
  > /dev/null
echo 60

################################################################################
##### Adds the EPUB to Calibre with appropriate metadata
################################################################################

ebook-meta pippo.epub \
    --cover=cover.jpg \
    --title="$TITLE" \
    --authors='Bruce Schneier' \
    --author-sort='Schneier, Bruce' \
    --tags='Crypto-Gram' \
    > /dev/null

calibredb add pippo.epub > /dev/null
echo 70

################################################################################
##### Adds the MOBI to Calibre
################################################################################

ebook-meta pippo.mobi \
    --cover=cover.jpg \
    --title="$TITLE" \
    --authors='Bruce Schneier' \
    --author-sort='Schneier, Bruce' \
    --tags='Crypto-Gram, IT, Security' \
    > /dev/null

QUERY="title:\"=$TITLE\""
ID=$(calibredb list --search "$QUERY" | grep '^[0-9]\+ ' | cut -d' ' -f 1)
calibredb add_format $ID pippo.mobi > /dev/null
echo 80

################################################################################
##### Upload the files to my blog
################################################################################

EPUB_MONTHLY=cryptogram-$(date '+%Y-%m').epub
EPUB_LAST=cryptogram-last.epub
cp pippo.epub "$EPUB_MONTHLY" && ftp_upload "$EPUB_MONTHLY"
cp pippo.epub "$EPUB_LAST" && ftp_upload "$EPUB_LAST"
echo 90

MOBI_MONTHLY=cryptogram-$(date '+%Y-%m').mobi
MOBI_LAST=cryptogram-last.mobi
cp pippo.mobi "$MOBI_MONTHLY" && ftp_upload "$MOBI_MONTHLY"
cp pippo.mobi "$MOBI_LAST" && ftp_upload "$MOBI_LAST"
echo 100

################################################################################
##### Generate a Hugo post, if applicable
################################################################################

if [ -d "$HOME/bernardi.cloud" ]
then
    VAR_YYYY=$(date +'%Y')
    VAR_MM=$(date +'%m')
    VAR_DD=$(date +'%d')
    VAR_MONTH=$(date +'%B')
    VAR_month=$(echo "$VAR_MONTH" | tr '[:upper:]' '[:lower:]')
    echo 'HUGO TEMPLATE VARIABLES'
    echo '-----------------------'
    echo "YYYY=$VAR_YYYY"
    echo "MM=$VAR_MM"
    echo "DD=$VAR_DD"
    echo "VAR_MONTH=$VAR_MONTH"
    echo "VAR_month=$VAR_month"
    ARTICLE="$VAR_YYYY-$VAR_MM-$VAR_DD-crypto-gram-$VAR_month-$VAR_YYYY-in-epub-and-mobi-format.md"
    ARTICLE="$HOME/bernardi.cloud/content/crypto-gram-for-e-readers/$ARTICLE"
    cp "$SCRIPT_DIR/hugo-template.md" "$ARTICLE"
    "$SED" -i "s/_YYYY_/$VAR_YYYY/g" "$ARTICLE"
    "$SED" -i "s/_MM_/$VAR_MM/g" "$ARTICLE"
    "$SED" -i "s/_DD_/$VAR_DD/g" "$ARTICLE"
    "$SED" -i "s/_MONTH_/$VAR_MONTH/g" "$ARTICLE"
    "$SED" -i "s/_month_/$VAR_month/g" "$ARTICLE"
fi

################################################################################
##### Final cleanup
################################################################################

cd "$OLD_PWD"
rm -fr "$TMP_DIR"

) |
zenity --progress \
    --title='Crypto-Gram to Calibre' \
    --text="Downloading and importing webpage '$TITLE'..." \
    --percentage=0

[ "$?" = -1 ] && \
    zenity --error --title='Crypto-Gram to Calibre' --text="Import canceled."

